# THESE CAN CHANGE!!! always double check if you have issues

# in pytransform.pyc, this is the huge static array being set from 255 to 0.
# if you need an easier identifier, look for the wrapper that calls the vm.
# it sets a global that is used by the function with this array.
# here's what this means:
# let's say we have INPLACE_MATRIX_MULTIPLY. it's value is normally 17.
# do opcode_mixer[17] and you'll get 56. if you check the switch case, in
# the modified ceval and you'll see PyNumber_InPlaceMatrixMultiply there.
opcode_mixer = [
	0x00, 0x50, 0x3D, 0x41, 0x03, 0x18, 0x3E, 0x46, 0x26, 0x16, 0x1B, 0x4E,
	0x27, 0x30, 0x53, 0x2E, 0x04, 0x38, 0x4B, 0x0A, 0x05, 0x06, 0x43, 0x2C,
	0x4A, 0x2D, 0x12, 0x07, 0x1C, 0x13, 0x1E, 0x1F, 0x20, 0x21, 0x3A, 0x37,
	0x19, 0x36, 0x08, 0x45, 0x28, 0x29, 0x2A, 0x2B, 0x56, 0x09, 0x2F, 0x25,
	0x42, 0x0C, 0x32, 0x33, 0x34, 0x35, 0x0B, 0x0D, 0x4C, 0x3F, 0x55, 0x11,
	0x0E, 0x02, 0x10, 0x14, 0x47, 0x39, 0x54, 0x31, 0x15, 0x17, 0x1A, 0x40,
	0x48, 0x49, 0x4F, 0x1D, 0x3B, 0x0F, 0x23, 0x24, 0x4D, 0x51, 0x52, 0x3C,
	0x44, 0x59, 0x01, 0x57, 0x58, 0x22, 0x86, 0x99, 0x5C, 0x5D, 0x6B, 0xE7,
	0xC0, 0xA1, 0xC4, 0x65, 0x64, 0xF1, 0xEF, 0xA3, 0xD6, 0xE5, 0xF5, 0xDA,
	0xD2, 0xD4, 0xE3, 0x9B, 0xCE, 0x71, 0x72, 0x73, 0x74, 0xA4, 0xDB, 0x66,
	0x78, 0x79, 0x7A, 0xEE, 0x7C, 0x7D, 0x9D, 0xB2, 0x8B, 0xCC, 0xEA, 0x83,
	0x5E, 0xA5, 0xD7, 0xE0, 0xCD, 0x89, 0x5B, 0xAC, 0x8C, 0x8D, 0x8E, 0x8F,
	0xBF, 0x92, 0x75, 0x82, 0xB6, 0x95, 0xED, 0xF0, 0xC5, 0x6D, 0x9A, 0xC6,
	0x60, 0x70, 0x9E, 0xBE, 0x61, 0xA0, 0xB9, 0x9F, 0xDE, 0xB3, 0x8A, 0xC9,
	0xBD, 0xA9, 0x88, 0x67, 0xF9, 0xD9, 0x62, 0x90, 0xE9, 0xC3, 0xF8, 0xCB,
	0x63, 0xB1, 0x84, 0xC7, 0xD5, 0x98, 0x80, 0xE6, 0x9C, 0xAE, 0xF2, 0xAB,
	0xDD, 0xBA, 0xEC, 0xB5, 0xE1, 0x6F, 0x68, 0xB0, 0xA7, 0x69, 0xD0, 0xA8,
	0xDF, 0xAA, 0x6A, 0xEB, 0x7B, 0xBC, 0xB8, 0x85, 0xB7, 0xF7, 0x6C, 0xD3,
	0xF6, 0x6E, 0xA6, 0xAD, 0x97, 0xCF, 0xE2, 0xC8, 0xF4, 0x5F, 0x77, 0x7E,
	0xD8, 0x91, 0xBB, 0xF3, 0xAF, 0x7F, 0x81, 0xA2, 0x87, 0xCA, 0xE8, 0xC1,
	0x93, 0x76, 0x96, 0xE4, 0xB4, 0xC2, 0xD1, 0xDC, 0xFA, 0x5A, 0x94, 0xFB,
	0xFC, 0xFD, 0xFE, 0xFF
]

def unscramble_opcode_mixer(zoombie):
    new_mixer = opcode_mixer[:]
    for i in range(90):
        m = new_mixer[i]
        if m != i:
            mix_idx = zoombie + i - ((zoombie + i) // 90 * 90)
            if new_mixer[mix_idx] != mix_idx:
                new_mixer[i] = new_mixer[mix_idx]
                new_mixer[mix_idx] = m
    
    for i in range(90, 252):
        m = new_mixer[i]
        zp = zoombie + i
        if m != i:
            mix_idx = (zp % 162 + 90) % 256
            if new_mixer[mix_idx] != mix_idx:
                new_mixer[i] = new_mixer[mix_idx]
                new_mixer[mix_idx] = m
    
    return new_mixer

def correct_py_bytecode(new_mixer, code):
    for i in range(0, len(code), 2):
        # need to do index on mix table since we're trying to reverse the conversion
        code[i] = opcode_mixer.index(new_mixer.index(code[i]))